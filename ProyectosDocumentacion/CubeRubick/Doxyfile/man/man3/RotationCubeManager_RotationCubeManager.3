.TH "RotationCubeManager::RotationCubeManager" 3 "Martes, 26 de Mayo de 2015" "CubeRubick" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RotationCubeManager::RotationCubeManager \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <RotationCubeManager\&.h>\fP
.SS "M칠todos p칰blicos"

.in +1c
.ti -1c
.RI "\fBRotationCubeManager\fP ()"
.br
.ti -1c
.RI "void \fBaddRotation\fP (int face, int direction)"
.br
.ti -1c
.RI "void \fBdeleteCurrentCompleteRotation\fP ()"
.br
.ti -1c
.RI "\fBMovimiento\fP * \fBgetCurrentRotation\fP ()"
.br
.ti -1c
.RI "void \fBupdateOrientation\fP ()"
.br
.ti -1c
.RI "void \fBupdateFaceMap\fP (int faceAxisX, float faceAxisY)"
.br
.ti -1c
.RI "bool \fBRayTriangleIntersect\fP (glm::vec3 orig, glm::vec3 dir, glm::vec3 vert0, glm::vec3 vert1, glm::vec3 vert2, double *\fBt\fP, double *\fBu\fP, double *\fBv\fP)"
.br
.ti -1c
.RI "void \fBsaveRotations\fP ()"
.br
.ti -1c
.RI "void \fBloadRotations\fP ()"
.br
.ti -1c
.RI "void \fBSetVerticesCube\fP (\fBVertex3\fP *\fBverticesCube\fP)"
.br
.ti -1c
.RI "void \fBSetIndexCube\fP (GLubyte *\fBindexCube\fP)"
.br
.ti -1c
.RI "void \fBSetCamera\fP (\fBCamera\fP *\fBcamera\fP)"
.br
.ti -1c
.RI "void \fBSetWorldMatrix\fP (glm::mat4 \fBWorldMatrix\fP)"
.br
.ti -1c
.RI "std::vector< \fBMovimiento\fP * > * \fBGetMovimientosSave\fP ()"
.br
.ti -1c
.RI "virtual \fB~RotationCubeManager\fP ()"
.br
.in -1c
.SS "Atributos privados"

.in +1c
.ti -1c
.RI "int \fBfaceMap\fP [6]"
.br
.ti -1c
.RI "float \fBaxisXAngleAct\fP = 0\&.7852"
.br
.ti -1c
.RI "std::vector< \fBMovimiento\fP * > * \fBmovimientos\fP = new std::vector<\fBMovimiento\fP*>()"
.br
.ti -1c
.RI "std::vector< \fBMovimiento\fP * > * \fBmovimientosSave\fP = new std::vector<\fBMovimiento\fP*>()"
.br
.ti -1c
.RI "\fBVertex3\fP * \fBverticesCube\fP"
.br
.ti -1c
.RI "GLubyte * \fBindexCube\fP"
.br
.ti -1c
.RI "\fBCamera\fP * \fBcamera\fP"
.br
.ti -1c
.RI "glm::mat4 \fBWorldMatrix\fP"
.br
.in -1c
.SH "Descripci칩n detallada"
.PP 
Clase que maneja y registra las rotaciones que realiza el cubo\&. 
.PP
Definici칩n en la l칤nea 32 del archivo RotationCubeManager\&.h\&.
.SH "Documentaci칩n del constructor y destructor"
.PP 
.SS "RotationCubeManager::RotationCubeManager::RotationCubeManager ()"
Constructor\&. 
.PP
Definici칩n en la l칤nea 15 del archivo RotationCubeManager\&.cpp\&.
.PP
Hace referencia a i\&.
.SS "RotationCubeManager::RotationCubeManager::~RotationCubeManager ()\fC [virtual]\fP"
Destructor\&. 
.PP
Definici칩n en la l칤nea 24 del archivo RotationCubeManager\&.cpp\&.
.SH "Documentaci칩n de las funciones miembro"
.PP 
.SS "void RotationCubeManager::RotationCubeManager::addRotation (intface, intdirection)"
Metodo que agrega una rotaci蚤 
.PP
\fBPar치metros:\fP
.RS 4
\fIface\fP Cara que se agrega\&. 
.br
\fIdirection\fP Direcci蚤 de la cara\&. 
.RE
.PP

.PP
Definici칩n en la l칤nea 32 del archivo RotationCubeManager\&.cpp\&.
.PP
Hace referencia a Movimiento::direction y Movimiento::face\&.
.PP
Referenciado por GLFWManager::ProcessInput()\&.
.SS "void RotationCubeManager::RotationCubeManager::deleteCurrentCompleteRotation ()"
M俸odo que elimina la rotaci蚤 de una cara al completar su giro\&. 
.PP
Definici칩n en la l칤nea 41 del archivo RotationCubeManager\&.cpp\&.
.PP
Referenciado por RubiksCube::rotateFace()\&.
.SS "\fBMovimiento\fP * RotationCubeManager::RotationCubeManager::getCurrentRotation ()"
Metodo que obtiene el ultimo movimiento que esta realizando el rubick\&. 
.PP
Definici칩n en la l칤nea 47 del archivo RotationCubeManager\&.cpp\&.
.PP
Referenciado por GLApplication::ApplicationLoop() y RubiksCube::rotateFace()\&.
.SS "std::vector<\fBMovimiento\fP*>* RotationCubeManager::RotationCubeManager::GetMovimientosSave ()\fC [inline]\fP"
M俸odo que obtiene los movimientos que se han realizado sobre el Cubo de Rubick\&. 
.PP
\fBDevuelve:\fP
.RS 4

.RE
.PP

.PP
Definici칩n en la l칤nea 125 del archivo RotationCubeManager\&.h\&.
.PP
Referenciado por GLApplication::ApplicationLoop(), RubiksCube::rotateFace() y RubiksCube::rotateFaceAuto()\&.
.SS "void RotationCubeManager::RotationCubeManager::loadRotations ()"
M俸do que carga las rotaciones al iniciar sesi蚤\&. 
.PP
Definici칩n en la l칤nea 385 del archivo RotationCubeManager\&.cpp\&.
.PP
Hace referencia a Movimiento::direction y Movimiento::face\&.
.PP
Referenciado por GLApplication::Initialize()\&.
.SS "bool RotationCubeManager::RotationCubeManager::RayTriangleIntersect (glm::vec3orig, glm::vec3dir, glm::vec3vert0, glm::vec3vert1, glm::vec3vert2, double *t, double *u, double *v)"
M俸odo que obtiene la intersecci蚤 del rayo con un tri烱gulo, Se utiliza el algortimo de Tomas Moller\&. Representaci蚤 del rayo en coordenadas parametricas\&. R ( t ) = O + tD ------- (1) Un punto de un tri烱gulo esta dado por las coordenadas varicentricas, del triangulo, u >= 0, v >= 0 y u + v <= 1\&. T ( u v ) = (1 ; u ; v ) V 0 + uV 1 + vV 2 ------- (2) 
.PP
\fBPar치metros:\fP
.RS 4
\fIorig\fP Origen del rayo\&. 
.br
\fIdir\fP Direcci蚤 del rayo\&. 
.br
\fIvert0\fP Vertice 1 del triangulo a probar\&. 
.br
\fIvert1\fP Vertice 2 del triangulo a probar\&. 
.br
\fIvert2\fP Vertice 3 del triangulo a probar\&. 
.br
\fIt\fP Valor de ecuaci蚤 de (1) 
.br
\fIu\fP Coordenada u varicentrica del tri烱gulo (2)\&. 
.br
\fIv\fP Coordenada v varicentrica del tri烱gulo (2)\&. 
.RE
.PP
\fBDevuelve:\fP
.RS 4
Bandera que indica si hay intersecci蚤 o no, true existe la intersecci蚤 false no existe la intersecci蚤\&. 
.RE
.PP

.PP
Definici칩n en la l칤nea 156 del archivo RotationCubeManager\&.cpp\&.
.PP
Hace referencia a EPSILON\&.
.SS "void RotationCubeManager::RotationCubeManager::saveRotations ()"
M俸odo que guarda el estado del rubick al cerrar la ventana\&. 
.PP
Definici칩n en la l칤nea 369 del archivo RotationCubeManager\&.cpp\&.
.PP
Hace referencia a i\&.
.PP
Referenciado por GLFWManager::Destroy()\&.
.SS "void RotationCubeManager::RotationCubeManager::SetCamera (\fBCamera\fP *camera)\fC [inline]\fP"
Setter de la camara\&. 
.PP
\fBPar치metros:\fP
.RS 4
\fIcamera\fP Camara\&. 
.RE
.PP

.PP
Definici칩n en la l칤nea 111 del archivo RotationCubeManager\&.h\&.
.PP
Referenciado por GLApplication::Initialize()\&.
.SS "void RotationCubeManager::RotationCubeManager::SetIndexCube (GLubyte *indexCube)\fC [inline]\fP"
Setter de indicies del cubo\&. 
.PP
\fBPar치metros:\fP
.RS 4
\fIindexCube\fP Indices del cubo\&. 
.RE
.PP

.PP
Definici칩n en la l칤nea 104 del archivo RotationCubeManager\&.h\&.
.PP
Referenciado por GLApplication::Initialize()\&.
.SS "void RotationCubeManager::RotationCubeManager::SetVerticesCube (\fBVertex3\fP *verticesCube)\fC [inline]\fP"
Setter de los vertices del cubo\&. 
.PP
\fBPar치metros:\fP
.RS 4
\fIverticesCube\fP 
.RE
.PP

.PP
Definici칩n en la l칤nea 97 del archivo RotationCubeManager\&.h\&.
.PP
Referenciado por GLApplication::Initialize()\&.
.SS "void RotationCubeManager::RotationCubeManager::SetWorldMatrix (glm::mat4WorldMatrix)\fC [inline]\fP"
Setter de la matriz del rubick\&. 
.PP
\fBPar치metros:\fP
.RS 4
\fIWorldMatrix\fP Matriz rubick\&. 
.RE
.PP

.PP
Definici칩n en la l칤nea 118 del archivo RotationCubeManager\&.h\&.
.PP
Referenciado por GLApplication::ApplicationLoop()\&.
.SS "void RotationCubeManager::RotationCubeManager::updateFaceMap (intfaceAxisX, floatfaceAxisY)"
M俸odo que mapea las caras reales con las que fue contruido el rubick y con las caras que estan De frente al observador\&. 
.PP
\fBPar치metros:\fP
.RS 4
\fIfaceAxisX\fP Cara que esta viendo el observador\&. 
.br
\fIfaceAxisY\fP Cara que esta viendo una camara invisible sobre el eje y\&. 
.RE
.PP

.PP
Definici칩n en la l칤nea 195 del archivo RotationCubeManager\&.cpp\&.
.SS "void RotationCubeManager::RotationCubeManager::updateOrientation ()"
M俸odo que actualiza las orientaci蚤 de las caras del rubick\&. 
.PP
Definici칩n en la l칤nea 55 del archivo RotationCubeManager\&.cpp\&.
.PP
Hace referencia a i, t, u y v\&.
.PP
Referenciado por GLFWManager::ProcessInput()\&.
.SH "Documentaci칩n de los datos miembro"
.PP 
.SS "float RotationCubeManager::RotationCubeManager::axisXAngleAct = 0\&.7852\fC [private]\fP"

.PP
Definici칩n en la l칤nea 135 del archivo RotationCubeManager\&.h\&.
.SS "\fBCamera\fP* RotationCubeManager::RotationCubeManager::camera\fC [private]\fP"

.PP
Definici칩n en la l칤nea 140 del archivo RotationCubeManager\&.h\&.
.SS "int RotationCubeManager::RotationCubeManager::faceMap[6]\fC [private]\fP"

.PP
Definici칩n en la l칤nea 134 del archivo RotationCubeManager\&.h\&.
.SS "GLubyte* RotationCubeManager::RotationCubeManager::indexCube\fC [private]\fP"

.PP
Definici칩n en la l칤nea 139 del archivo RotationCubeManager\&.h\&.
.SS "std::vector<\fBMovimiento\fP*>* RotationCubeManager::RotationCubeManager::movimientos = new std::vector<\fBMovimiento\fP*>()\fC [private]\fP"

.PP
Definici칩n en la l칤nea 136 del archivo RotationCubeManager\&.h\&.
.SS "std::vector<\fBMovimiento\fP*>* RotationCubeManager::RotationCubeManager::movimientosSave = new std::vector<\fBMovimiento\fP*>()\fC [private]\fP"

.PP
Definici칩n en la l칤nea 137 del archivo RotationCubeManager\&.h\&.
.SS "\fBVertex3\fP* RotationCubeManager::RotationCubeManager::verticesCube\fC [private]\fP"

.PP
Definici칩n en la l칤nea 138 del archivo RotationCubeManager\&.h\&.
.SS "glm::mat4 RotationCubeManager::RotationCubeManager::WorldMatrix\fC [private]\fP"

.PP
Definici칩n en la l칤nea 141 del archivo RotationCubeManager\&.h\&.

.SH "Autor"
.PP 
Generado autom치ticamente por Doxygen para CubeRubick del c칩digo fuente\&.
