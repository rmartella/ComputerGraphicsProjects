.TH "GLApplication" 3 "Martes, 26 de Mayo de 2015" "CubeRubick" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GLApplication \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Main\&.h>\fP
.SS "M√©todos p√∫blicos"

.in +1c
.ti -1c
.RI "\fBGLApplication\fP ()"
.br
.ti -1c
.RI "\fB~GLApplication\fP ()"
.br
.ti -1c
.RI "int \fBGLMain\fP ()"
.br
.ti -1c
.RI "\fBWindowManager\fP * \fBGetWindowManager\fP ()"
.br
.ti -1c
.RI "void \fBSetWindowManager\fP (\fBWindowManager\fP *pWindowManager)"
.br
.ti -1c
.RI "\fBCamera\fP * \fBGetCamera\fP ()"
.br
.ti -1c
.RI "void \fBSetCamera\fP (\fBCamera\fP *\fBpCamera\fP)"
.br
.ti -1c
.RI "void \fBSetGRotation\fP (glm::quat \fBgRotation\fP)"
.br
.ti -1c
.RI "glm::quat \fBGetGRotation\fP ()"
.br
.ti -1c
.RI "void \fBSetArmar\fP (bool \fBarmar\fP)"
.br
.ti -1c
.RI "void \fBSetRotationCubeManager\fP (\fBRotationCubeManager::RotationCubeManager\fP *\fBrotationCubeManager\fP)"
.br
.ti -1c
.RI "\fBRotationCubeManager::RotationCubeManager\fP * \fBGetRotationCubeManager\fP ()"
.br
.ti -1c
.RI "void \fBSetSpeedRotattionFaces\fP (float \fBspeedRotattionFaces\fP)"
.br
.ti -1c
.RI "void \fBInitialize\fP ()"
.br
.ti -1c
.RI "void \fBApplicationLoop\fP ()"
.br
.ti -1c
.RI "void \fBDestroy\fP ()"
.br
.in -1c
.SS "Atributos p√∫blicos"

.in +1c
.ti -1c
.RI "int \fBScreenWidth\fP = 1024"
.br
.ti -1c
.RI "int \fBScreenHeight\fP = 700"
.br
.ti -1c
.RI "glm::mat4 \fBeRotation\fP"
.br
.in -1c
.SS "Atributos protegidos"

.in +1c
.ti -1c
.RI "\fBWindowManager\fP * \fBwindowManager\fP"
.br
.ti -1c
.RI "\fBCamera\fP * \fBcamera\fP"
.br
.ti -1c
.RI "glm::quat \fBgRotation\fP"
.br
.ti -1c
.RI "\fBRotationCubeManager::RotationCubeManager\fP * \fBrotationCubeManager\fP"
.br
.ti -1c
.RI "float \fBspeedRotattionFaces\fP"
.br
.ti -1c
.RI "bool \fBarmar\fP"
.br
.in -1c
.SH "Descripci√≥n detallada"
.PP 
Clase principal de la aplicacion, maneja la inicializaciÛn de la aplicaciÛn, loop de la aplicaciÛn y limpia los recursos utilizados\&. 
.PP
Definici√≥n en la l√≠nea 16 del archivo Main\&.h\&.
.SH "Documentaci√≥n del constructor y destructor"
.PP 
.SS "GLApplication::GLApplication ()\fC [inline]\fP"
Constructor default\&. 
.PP
Definici√≥n en la l√≠nea 28 del archivo Main\&.h\&.
.PP
Hace referencia a f, gRotation y rotationCubeManager\&.
.SS "GLApplication::~GLApplication ()\fC [inline]\fP"
Destructor\&. 
.PP
Definici√≥n en la l√≠nea 42 del archivo Main\&.h\&.
.PP
Hace referencia a Destroy()\&.
.SH "Documentaci√≥n de las funciones miembro"
.PP 
.SS "void GLApplication::ApplicationLoop ()"
Loop de la aplicaciÛn, solo se sale de esta funciÛn si el usuario pulsa Esc o cierra la ventana\&.
.PP
Loop de la aplicaci√≥n, solo se sale de esta funci√≥n si el usuario pulsa Esc o cierra la ventana\&. 
.PP
Definici√≥n en la l√≠nea 136 del archivo Main\&.cpp\&.
.PP
Hace referencia a armar, TimeManager::CalculateFrameRate(), TimeManager::DeltaTime, f, RotationCubeManager::RotationCubeManager::getCurrentRotation(), RotationCubeManager::RotationCubeManager::GetMovimientosSave(), gRotation, TimeManager::Instance(), WindowManager::ProcessInput(), Node::renderNode(), RubiksCube::rotateFace(), RubiksCube::rotateFaceAuto(), rotationCubeManager, RubiksCube::SetRotationCubeManager(), Node::setTransformMatrix(), RotationCubeManager::RotationCubeManager::SetWorldMatrix(), speedRotattionFaces, WindowManager::SwapTheBuffers() y windowManager\&.
.PP
Referenciado por GLMain()\&.
.SS "void GLApplication::Destroy ()"
MÈtodo que hace limpieza de los recursos utilizados por la aplicaciÛn\&.
.PP
M√©todo que hace limpieza de los recursos utilizados por la aplicaci√≥n\&. 
.PP
Definici√≥n en la l√≠nea 212 del archivo Main\&.cpp\&.
.PP
Hace referencia a camera, WindowManager::Destroy(), Model::Destroy() y windowManager\&.
.PP
Referenciado por GLMain() y ~GLApplication()\&.
.SS "\fBCamera\fP* GLApplication::GetCamera ()\fC [inline]\fP"
Obtiene la c·mara de la aplicaciÛn\&. 
.PP
\fBDevuelve:\fP
.RS 4
Camar\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 73 del archivo Main\&.h\&.
.PP
Hace referencia a camera\&.
.SS "glm::quat GLApplication::GetGRotation ()\fC [inline]\fP"
Obtiene el Cuaternion actual de la escena\&. 
.PP
\fBDevuelve:\fP
.RS 4
Cuaternion de la aplicaciÛn\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 96 del archivo Main\&.h\&.
.PP
Hace referencia a gRotation\&.
.PP
Referenciado por GLFWManager::ProcessInput()\&.
.SS "\fBRotationCubeManager::RotationCubeManager\fP* GLApplication::GetRotationCubeManager ()\fC [inline]\fP"
Obtiene el manejador de rotaciones\&. 
.PP
\fBDevuelve:\fP
.RS 4
Manejador de rotaciones de las caras del cubo\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 120 del archivo Main\&.h\&.
.PP
Hace referencia a rotationCubeManager\&.
.PP
Referenciado por GLFWManager::Destroy() y GLFWManager::ProcessInput()\&.
.SS "\fBWindowManager\fP* GLApplication::GetWindowManager ()\fC [inline]\fP"
MÈtodo que obtiene el manejador de ventanas de la aplicaciÛn\&. Este debe ser creada antes de crear la aplicaciÛn\&. 
.PP
\fBDevuelve:\fP
.RS 4
Manejador de ventanas\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 57 del archivo Main\&.h\&.
.PP
Hace referencia a windowManager\&.
.SS "int GLApplication::GLMain ()"
Funcion principal de la aplicaciÛn, debe de ser llamada en la funciÛn \fBWindowManager\fP\&. 
.PP
\fBDevuelve:\fP
.RS 4
Termino del programa\&.
.RE
.PP
Funcion principal de la aplicaci√≥n, debe de ser llamada en la funci√≥n \fBWindowManager\fP\&. 
.PP
\fBDevuelve:\fP
.RS 4
Terimno del programa\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 80 del archivo Main\&.cpp\&.
.PP
Hace referencia a ApplicationLoop(), Destroy() y Initialize()\&.
.PP
Referenciado por main()\&.
.SS "void GLApplication::Initialize ()"
InicializaciÛn de la aplicaciÛn\&.
.PP
Inicializaci√≥n de la aplicaci√≥n\&. 
.PP
Definici√≥n en la l√≠nea 97 del archivo Main\&.cpp\&.
.PP
Hace referencia a camera, f, index, WindowManager::Initialize(), Model::Initialize(), RotationCubeManager::RotationCubeManager::loadRotations(), Camera::PositionCamera(), rotationCubeManager, ScreenHeight, ScreenWidth, RotationCubeManager::RotationCubeManager::SetCamera(), Model::SetCamera(), RotationCubeManager::RotationCubeManager::SetIndexCube(), Camera::SetPerspective(), RotationCubeManager::RotationCubeManager::SetVerticesCube(), speedRotattionFaces y windowManager\&.
.PP
Referenciado por GLMain()\&.
.SS "void GLApplication::SetArmar (boolarmar)\fC [inline]\fP"
Setter para armar el cubo\&. 
.PP
\fBPar√°metros:\fP
.RS 4
\fIarmar\fP Bander para armar\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 104 del archivo Main\&.h\&.
.PP
Hace referencia a armar\&.
.PP
Referenciado por GLFWManager::ProcessInput()\&.
.SS "void GLApplication::SetCamera (\fBCamera\fP *pCamera)\fC [inline]\fP"
Setter para la c·mara de la aplicaciÛn\&. 
.PP
\fBPar√°metros:\fP
.RS 4
\fIpCamera\fP c·mara que usar· aplicaciÛn\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 80 del archivo Main\&.h\&.
.PP
Hace referencia a camera y pCamera\&.
.PP
Referenciado por main()\&.
.SS "void GLApplication::SetGRotation (glm::quatgRotation)\fC [inline]\fP"
Setter para la rotaciÛn de la escena\&. 
.PP
\fBPar√°metros:\fP
.RS 4
\fIgRotation\fP Cuaternion de rotaciÛn de la escena 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 88 del archivo Main\&.h\&.
.PP
Hace referencia a gRotation\&.
.PP
Referenciado por GLFWManager::ProcessInput()\&.
.SS "void GLApplication::SetRotationCubeManager (\fBRotationCubeManager::RotationCubeManager\fP *rotationCubeManager)\fC [inline]\fP"
Setter para el manejador de rotaciones\&. 
.PP
\fBPar√°metros:\fP
.RS 4
\fIrotationCubeManager\fP Manejador de rotaciones de las caras del cubo\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 112 del archivo Main\&.h\&.
.PP
Hace referencia a rotationCubeManager\&.
.SS "void GLApplication::SetSpeedRotattionFaces (floatspeedRotattionFaces)\fC [inline]\fP"
Setter para la velocidad del rotaciÛn de la cara\&. 
.PP
\fBPar√°metros:\fP
.RS 4
\fIspeedRotattionFaces\fP Velocidad del rotaciÛn de la cara\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 128 del archivo Main\&.h\&.
.PP
Hace referencia a speedRotattionFaces\&.
.SS "void GLApplication::SetWindowManager (\fBWindowManager\fP *pWindowManager)\fC [inline]\fP"
MÈtodo que setter del manejador de ventanas de la aplicaciÛn\&. Este debe ser setteada antes de inicializar el loop\&. 
.PP
\fBPar√°metros:\fP
.RS 4
\fIpWindowManager\fP Manejador de ventanas que usar· la aplicaciÛn\&. 
.RE
.PP

.PP
Definici√≥n en la l√≠nea 65 del archivo Main\&.h\&.
.PP
Hace referencia a windowManager\&.
.PP
Referenciado por main()\&.
.SH "Documentaci√≥n de los datos miembro"
.PP 
.SS "bool GLApplication::armar\fC [protected]\fP"

.PP
Definici√≥n en la l√≠nea 164 del archivo Main\&.h\&.
.PP
Referenciado por ApplicationLoop() y SetArmar()\&.
.SS "\fBCamera\fP* GLApplication::camera\fC [protected]\fP"

.PP
Definici√≥n en la l√≠nea 156 del archivo Main\&.h\&.
.PP
Referenciado por Destroy(), GetCamera(), Initialize() y SetCamera()\&.
.SS "glm::mat4 GLApplication::eRotation"

.PP
Definici√≥n en la l√≠nea 148 del archivo Main\&.h\&.
.SS "glm::quat GLApplication::gRotation\fC [protected]\fP"

.PP
Definici√≥n en la l√≠nea 158 del archivo Main\&.h\&.
.PP
Referenciado por ApplicationLoop(), GetGRotation(), GLApplication() y SetGRotation()\&.
.SS "\fBRotationCubeManager::RotationCubeManager\fP* GLApplication::rotationCubeManager\fC [protected]\fP"

.PP
Definici√≥n en la l√≠nea 160 del archivo Main\&.h\&.
.PP
Referenciado por ApplicationLoop(), GetRotationCubeManager(), GLApplication(), Initialize() y SetRotationCubeManager()\&.
.SS "int GLApplication::ScreenHeight = 700"

.PP
Definici√≥n en la l√≠nea 23 del archivo Main\&.h\&.
.PP
Referenciado por Initialize() y GLFWManager::ReshapeGL()\&.
.SS "int GLApplication::ScreenWidth = 1024"
El ancho y alto de la ventana\&. 
.PP
Definici√≥n en la l√≠nea 22 del archivo Main\&.h\&.
.PP
Referenciado por Initialize() y GLFWManager::ReshapeGL()\&.
.SS "float GLApplication::speedRotattionFaces\fC [protected]\fP"

.PP
Definici√≥n en la l√≠nea 162 del archivo Main\&.h\&.
.PP
Referenciado por ApplicationLoop(), Initialize() y SetSpeedRotattionFaces()\&.
.SS "\fBWindowManager\fP* GLApplication::windowManager\fC [protected]\fP"

.PP
Definici√≥n en la l√≠nea 155 del archivo Main\&.h\&.
.PP
Referenciado por ApplicationLoop(), Destroy(), GetWindowManager(), Initialize() y SetWindowManager()\&.

.SH "Autor"
.PP 
Generado autom√°ticamente por Doxygen para CubeRubick del c√≥digo fuente\&.
